[Corner Test Framework ]
========================

- Mainly helps to perform functional and performance tests, by
  specifying a scenario using json format.

Usage 
------
To run a test scenario:
  $ npm run test /path/<filename>.sc <number of loop>

- The framework reports execution status (PASS/FAIL) of every 
  functions and summary report at the end of execution.

Scenarios
---------
 - Test scenarios are in written in json form
 - syntax: 

   FUNC_OBJ: {
     NOTE: function object identifier '_start' is a keyword that 
           marks where exection starts 
     name:  a name given to this test action
     cb:    callback to execute
     arg:   list of arg objects
   },

  arg_obj: {
    type:  type of argument; can be 'func', 'var' or 'const'
    name:  a name given to attribute of the arg, which will be
           passed to cb.
    data:  
      - If type is 'func' data points to another FUNC_OBJ to execute, 
        to get the arg value.
      - If type is 'const' data is the arg value.
      - And if type is 'var' data is mockroo generated value
  }

Modules
---------
 - Modules are implementations of functions those will be used 
   to create different test scenarios.
 - Currently there are a couple of platform and service modules
   implemented. SEE ./modules/*
 

Examples
---------

E.g. scenario

- create card_officer,
- sign card officer
- create patient
- get patient created


let sample_sc = {
  _start: {		     //execution start from here 
    name: "get_patient", 
    cb: MRU.get_patient,      //MRU imported from mru module
    arg: [
      {
        type: "func",
        name: "user_id",
        data: "create_patient"
      },
    ]
  },
  create_patient: {
    name: "create_patient",
    cb: MRU.create_patient,     //MRU imported from mru module
    arg: [
      {
        type: "func",
        name: "token",
        data: "signin_cofficer"
      },
      {
        type: "var",
        name: "pii",
        data: 'pii'
      }
    ]
  },
  signin_cofficer: {
    name: "signin_cofficer",
    cb: MRU.signin_cofficer,
    arg: [
      {
        type: "func",
        name: "security",
        data: "create_cofficer"
      }
    ]
  },
  create_cofficer: {
    name: "create_cofficer",
    cb: MRU.create_cofficer,
    arg: [
      {
        type: "var",
        name: "pii",
        data: "pii"
      }
    ]
  }
}

 

